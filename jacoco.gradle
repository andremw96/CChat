apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.5.201505241946"
}

//android.testOptions {
//    unitTests.all {
//        jacoco {
//            includeNoLocationClasses = true
//        }
//    }
//}
//
//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//    jacoco.excludes = ['jdk.internal.*']
//    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
//}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                classDirectories.setFrom(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: [
                                '**/R.class',
                                '**/R$*.class',
                                '**/*$ViewInjector*.*',
                                '**/*$ViewBinder*.*',
                                '**/BuildConfig.*',
                                '**/Manifest*.*'
                        ]
                )
                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs.setFrom(coverageSourceDirs)
                sourceDirectories.setFrom(coverageSourceDirs)
                executionData.setFrom("${project.buildDir}/jacoco/${testTaskName}.exec")
                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}

//project.afterEvaluate {
//
//    (android.hasProperty('applicationVariants')
//            ? android.'applicationVariants'
//            : android.'libraryVariants')
//            .all { variant ->
//                def variantName = variant.name
//                def unitTestTask = "test${variantName.capitalize()}UnitTest"
//                def androidTestCoverageTask = "create${variantName.capitalize()}CoverageReport"
//
//                tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
//                        "$unitTestTask",
//                        "$androidTestCoverageTask"
//                ]) {
//                    group = "Reporting"
//                    description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build"
//
//                    reports {
//                        html.enabled = true
//                        xml.enabled = true
//                        //csv.enabled = true
//                    }
//
//                    def excludes = [
//                            // data binding
//                            'android/databinding/**/*.class',
//                            '**/android/databinding/*Binding.class',
//                            '**/android/databinding/*',
//                            '**/androidx/databinding/*',
//                            '**/BR.*',
//                            // android
//                            '**/R.class',
//                            '**/R$*.class',
//                            '**/BuildConfig.*',
//                            '**/Manifest*.*',
//                            '**/*Test*.*',
//                            'android/**/*.*',
//                            // butterKnife
//                            '**/*$ViewInjector*.*',
//                            '**/*$ViewBinder*.*',
//                            // dagger
//                            '**/*_MembersInjector.class',
//                            '**/Dagger*Component.class',
//                            '**/Dagger*Component$Builder.class',
//                            '**/*Module_*Factory.class',
//                            '**/di/module/*',
//                            '**/*_Factory*.*',
//                            '**/*Module*.*',
//                            '**/*Dagger*.*',
//                            '**/*Hilt*.*',
//                            // kotlin
//                            '**/*MapperImpl*.*',
//                            '**/*$ViewInjector*.*',
//                            '**/*$ViewBinder*.*',
//                            '**/BuildConfig.*',
//                            '**/*Component*.*',
//                            '**/*BR*.*',
//                            '**/Manifest*.*',
//                            '**/*$Lambda$*.*',
//                            '**/*Companion*.*',
//                            '**/*Module*.*',
//                            '**/*Dagger*.*',
//                            '**/*Hilt*.*',
//                            '**/*MembersInjector*.*',
//                            '**/*_MembersInjector.class',
//                            '**/*_Factory*.*',
//                            '**/*_Provide*Factory*.*',
//                            '**/*Extensions*.*',
//                            // sealed and data classes
//                            '**/*$Result.*',
//                            '**/*$Result$*.*',
//                            // Android Instrumented Test
//                            '**/androidTest/**/*.*'
//                    ]
//
//                    def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir, excludes: excludes)
//                    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
//
//                    classDirectories.setFrom(files([
//                            javaClasses,
//                            kotlinClasses
//                    ]))
//
//                    def variantSourceSets = variant.sourceSets.java.srcDirs.collect { it.path }.flatten()
//                    sourceDirectories.setFrom(project.files(variantSourceSets))
//
//                    // disable android instrumentation test coverage check
//                    def androidTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])
//
//                    executionData(files([
//                            "$project.buildDir/jacoco/${unitTestTask}.exec",
//                            androidTestsData
//                    ]))
//                }
//            }
//}
